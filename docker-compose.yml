services:
  # Keycloak Authentication Service
  identity:
    depends_on:
      - postgres
    image: quay.io/keycloak/keycloak:26.2.4
    command: "start --import-realm --http-enabled=true"
    environment:
      KC_HOSTNAME: https://identity-bookingsmart.huypd.dev
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: ${DB_USERNAME}
      KC_DB_PASSWORD: ${DB_PASSWORD}
      KC_HEALTH_ENABLED: true
      KC_HTTP_PORT: 80
    volumes:
      - ./identity/bookingsmart-keycloak-theme.jar:/opt/keycloak/providers/bookingsmart-keycloak-theme.jar
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json

    networks:
      - booking-network
  # PostgreSQL Database
  postgres:
    image: debezium/postgres:17-alpine
    user: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - booking-network
    command: postgres -c wal_level=logical

  # Redis for Event Deduplication
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    networks:
      - booking-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    networks:
      - booking-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # Debezium Connect
  connect:
    image: quay.io/debezium/connect:3.2.0.Final
    ports:
      - "8083:8083"
    networks:
      - booking-network
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect

  kafka-setup:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-setup
    depends_on:
      - kafka
      - connect
    volumes:
      - ./debezium:/tmp/connectors
    command: >
      bash -lc '
        set -e
        echo "Waiting for Kafka Connect..." 
        sleep 20

        echo "Deploy flight connector"
        curl -i -X PUT -H "Accept: application/json" -H "Content-Type: application/json" \
          --data-binary @/tmp/connectors/flight-db-connector.json \
          http://connect:8083/connectors/flight-connector/config

        echo "Deploy booking connector"
        curl -i -X PUT -H "Accept: application/json" -H "Content-Type: application/json" \
          --data-binary @/tmp/connectors/booking-saga-outbox-connector.json \
          http://connect:8083/connectors/booking-connector/config

        echo "Deploy hotel connector"
        curl -i -X PUT -H "Accept: application/json" -H "Content-Type: application/json" \
          --data-binary @/tmp/connectors/hotel-db-connector.json \
          http://connect:8083/connectors/hotel-connector/config

        echo "Deploy payment connector"
        curl -i -X PUT -H "Accept: application/json" -H "Content-Type: application/json" \
          --data-binary @/tmp/connectors/payment-db-connector.json \
          http://connect:8083/connectors/payment-connector/config
      '
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    networks:
      - booking-network
      
  debezium-ui:
    image: quay.io/debezium/debezium-ui:2.1.2.Final
    ports:
      - "8077:8080"
    environment:
      KAFKA_CONNECT_URIS: http://connect:8083
    networks:
      - booking-network
  # Kafka UI
  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest

  #   ports:
  #     - "8091:8080"
  #   depends_on:
  #     - kafka
  #   networks:
  #     - booking-network
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  #     KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Discovery Service (Eureka)
  discovery-service:
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-discovery-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service/eureka
      - SERVER_PORT
    networks:
      - booking-network

  # API Gateway (Backoffice BFF)
  backoffice:
    build:
      context: ./backoffice-bff
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-backoffice:latest
    depends_on:
      - postgres # Chỉ đợi postgres healthy
      - identity
    entrypoint:
      [
        "/wait-for-it.sh",
        "identity:80",
        "--timeout=140",
        "--",
        "java",
        "-jar",
        "/app.jar",
      ]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_BACKOFFICE_BFF
      - SERVER_PORT
      - API_URL
    networks:
      - booking-network

  storefront:
    build:
      context: ./storefront-bff
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-storefront:latest
    depends_on:
      - postgres
      - identity
    entrypoint:
      [
        "/wait-for-it.sh",
        "identity:80",
        "--timeout=140",
        "--",
        "java",
        "-jar",
        "/app.jar",
      ]

    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_STOREFRONT_BFF
      - SERVER_PORT
      - API_URL

    networks:
      - booking-network
  storefront-fe:
    build:
      context: ./storefront-fe
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-storefront-fe:latest
    environment:
      - NODE_ENV=production
    networks:
      - booking-network
    restart: unless-stopped

  # Backoffice Frontend
  backoffice-fe:
    build:
      context: ./backoffice-fe
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_BFF_BASE_URL=${API_URL}
    image: phamduyhuyuit/bookingsmart-backoffice-fe:latest
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://backoffice
      - NEXT_PUBLIC_KEYCLOAK_URL=https://identity/realms/BookingSmart
    networks:
      - booking-network
    restart: unless-stopped
  # Flight Service
  flight-service:
    build:
      context: ./flight-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-flight-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/flight_db
      - DB_USERNAME
      - DB_PASSWORD
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

    # AI Agent Service
  aiAgent-service:
    build:
      context: ./aiAgent-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-ai-agent-service:latest
    entrypoint:
      [
        "/wait-for-it.sh",
        "identity:80",
        "--timeout=140",
        "--",
        "java",
        "-jar",
        "/app.jar",
      ]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - BOOKING_SMART_AI_CLIENT_SECRET
      - SERVER_PORT
      - DB_URL=jdbc:postgresql://postgres:5432/ai_db
      - DB_USERNAME
      - DB_PASSWORD
      - GEMINI_API_KEY
    networks:
      - booking-network
  # Hotel Service
  hotel-service:
    build:
      context: ./hotel-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-hotel-service:latest
    depends_on:
      postgres:
        condition: service_healthy

    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/hotel_db
      - DB_USERNAME
      - DB_PASSWORD
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Booking Service
  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-booking-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/booking_db
      - DB_USERNAME
      - DB_PASSWORD
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-payment-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/payment_db
      - DB_USERNAME
      - DB_PASSWORD
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
      - STRIPE_SECRET_KEY
      - STRIPE_PUBLISHABLE_KEY
    networks:
      - booking-network

  # Customer Service
  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    image: phamduyhuyuit/bookingsmart-customer-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_CUSTOMER_MANAGEMENT
      - DB_URL=jdbc:postgresql://postgres:5432/customer_db
      - DB_USERNAME
      - DB_PASSWORD
      - SERVER_PORT
    networks:
      - booking-network
  # Media Service -
  media-service:
    image: phamduyhuyuit/bookingsmart-media-service:latest
    build:
      context: ./media-service
      dockerfile: Dockerfile
    depends_on:
      - discovery-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
      - CLOUDINARY_CLOUD_NAME
      - CLOUDINARY_API_KEY
      - CLOUDINARY_API_SECRET
      - DB_URL=jdbc:postgresql://postgres:5432/media_db
      - DB_USERNAME
      - DB_PASSWORD
    networks:
      - booking-network

  # Nginx Reverse Proxy - API Gateway for Cloudflare Tunnel
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - booking-network
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - booking-network

  #Ollama
  #  ollama:
  #    profiles:
  #      - aiAgent
  #      - app
  #    image: ollama/ollama:latest
  #    container_name: ollama
  #    restart: unless-stopped
  #    environment:
  #      - OLLAMA_KEEP_ALIVE=24h
  #      - OLLAMA_HOST=0.0.0.0
  #    ports:
  #      - "11434:11434"
  #    volumes:
  #      - ollama_data:/root/.ollama

#  # PgAdmin for database management
#  pgadmin:
#    profiles:
#      - dev
#      - auth
#    image: dpage/pgadmin4:latest
#    environment:
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#      PGADMIN_DEFAULT_EMAIL: huypd.dev@gmail.com
#      PGADMIN_DEFAULT_PASSWORD: admin123
#    ports:
#      - "8666:80"
#    volumes:
#      - pgadmin_data:/var/lib/pgadmin
#    depends_on:
#      - postgres
#    restart: unless-stopped
#    networks:
#      - booking-network

networks:
  booking-network:
    driver: bridge
    name: booking-network
volumes:
  postgres_data:
  redis_data:
  n8n_data:
#    ollama_data:
#    pgadmin_data:
