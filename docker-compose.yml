services:
  # Logto Authentication Service
  identity:
    depends_on:
      - postgres
    profiles:
      - auth
    image: quay.io/keycloak/keycloak:26.0.2
    command: 'start-dev --import-realm'
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: p0stgr3s
      
    ports:
      - "9090:8080"
      - "8443:8443"
    volumes:
      - ./identity/bookingsmart-keycloak-theme.jar:/opt/keycloak/providers/bookingsmart-keycloak-theme.jar
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - booking-network
  # PostgreSQL Database
  postgres:
    profiles:
      - app
      - auth
      - dev
    image: postgres:17-alpine
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: p0stgr3s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - booking-network

  # Discovery Service (Eureka)
  discovery-service:
    profiles:
      - app
    build:
      context: ./discovery-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
    networks:
      - booking-network
  # API Gateway (Backoffice BFF)
  backoffice:
    profiles:
      - app
    build:
      context: ./backoffice-bff
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      logto:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
      - LOGTO_ENDPOINT=http://logto:3001
      - DB_URL=postgres://postgres:p0stgr3s@postgres:5432/logto
      - LOGTO_CLIENT_ID
      - LOGTO_CLIENT_SECRET
    networks:
      - booking-network

  # Flight Service
  flight-service:
    profiles:
      - app
    build:
      context: ./flight-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
      - DB_URL=jdbc:postgresql://postgres:5432/flight_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
      - LOGTO_ENDPOINT=http://logto:3001
      - LOGTO_CLIENT_ID
      - LOGTO_CLIENT_SECRET

    networks:
      - booking-network
  # Hotel Service
  # hotel-service:
  #   profiles:
  #     - app
  #   build:
  #     context: ./hotel-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8082:8082"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - EUREKA_URI=http://discovery-service:8761/eureka
  #     - DB_URL=jdbc:postgresql://postgres:5432/hotel_db
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=p0stgr3s
  #     - LOGTO_ENDPOINT=http://logto:3001
  #     - LOGTO_CLIENT_ID
  #     - LOGTO_CLIENT_SECRET
  #   networks:
  #     - booking-network
  # # Booking Service
  # booking-service:
  #   profiles:
  #     - app
  #   build:
  #     context: ./booking-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8083:8083"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - EUREKA_URI=http://discovery-service:8761/eureka
  #     - DB_URL=jdbc:postgresql://postgres:5432/booking_db
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=p0stgr3s
  #     - LOGTO_ENDPOINT=http://logto:3001
  #     - LOGTO_CLIENT_ID
  #     - LOGTO_CLIENT_SECRET
  #   networks:
  #     - booking-network
  # # Customer Service
  # customer-service:
  #   profiles:
  #     - app
  #   build:
  #     context: ./customer-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8084:8084"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     logto:
  #       condition: service_healthy
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - EUREKA_URI=http://discovery-service:8761/eureka
  #     - DB_URL=jdbc:postgresql://postgres:5432/customer_db
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=p0stgr3s
  #     - LOGTO_ENDPOINT=http://logto:3001
  #     - LOGTO_MANAGEMENT_API_ENDPOINT=http://logto:3002
  #     - LOGTO_CLIENT_ID
  #     - LOGTO_CLIENT_SECRET
  #   networks:
  #     - booking-network
  # # Payment Service
  # payment-service:
  #   profiles:
  #     - app
  #   build:
  #     context: ./payment-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8085:8085"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - EUREKA_URI=http://discovery-service:8761/eureka
  #     - DB_URL=jdbc:postgresql://postgres:5432/payment_db
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=p0stgr3s
  #     - LOGTO_ENDPOINT=http://logto:3001
  #     - LOGTO_CLIENT_ID
  #     - LOGTO_CLIENT_SECRET
  #   networks:
  #     - booking-network
  # # Transport Service
  # transport-service:
  #   profiles:
  #     - app
  #   build:
  #     context: ./transport-service
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8086:8086"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #     - EUREKA_URI=http://discovery-service:8761/eureka
  #     - DB_URL=jdbc:postgresql://postgres:5432/transport_db
  #     - DB_USERNAME=postgres
  #     - DB_PASSWORD=p0stgr3s
  #     - LOGTO_ENDPOINT=http://logto:3001
  #     - LOGTO_CLIENT_ID
  #     - LOGTO_CLIENT_SECRET
  #   networks:
  #     - booking-network
  # PgAdmin for database management
  pgadmin:
    profiles:
      - dev
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_DEFAULT_EMAIL: huypd.dev@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "8090:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - booking-network


networks:
  booking-network:
    driver: bridge
    name: booking-network
volumes:
    postgres_data:
    pgadmin_data:
