# OpenAPI Documentation Configuration
springdoc:
  packages-to-scan: com.pdh.media
  swagger-ui:
    path: /swagger-ui
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: swagger-ui
  oauthflow:
    authorization-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/auth
    token-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/token
  show-actuator: true





logging:
  level:
    com.pdh.media: DEBUG
    org.springframework.security: DEBUG
    org.springframework.oauth2: DEBUG
server:
  servlet:
    context-path: /media
spring:
  application:
    name: MEDIA-SERVICE
  profiles:
    active: local
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      enabled: true
  threads:
    virtual:
      enabled: true

---

spring:
  config:
    activate:
      on-profile: local

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart
  datasource:
    url: jdbc:postgresql://localhost:5432/media_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
# Cloudinary Configuration
cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}
  secure: true

server:
  port: 8089
  servlet:
    context-path: /media

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
  instance:
    hostname: localhost
    prefer-ip-address: false
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

---

spring:
  config:
    activate:
      on-profile: docker
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
# Cloudinary Configuration
cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}
  secure: true

server:
  port: 8089
  servlet:
    context-path: /media

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
