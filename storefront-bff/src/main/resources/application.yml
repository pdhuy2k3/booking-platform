server:
  port: 8086
  # Tomcat configuration for large payloads
  tomcat:
    max-http-form-post-size: 10MB
    max-swallow-size: 10MB

spring:
  profiles:
    active: local
  application:
    name: STOREFRONT-BFF
  # Servlet multipart configuration for large file uploads
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      enabled: true
logging:
  level:
    "[com.pdh.storefront]": DEBUG
    "[org.springframework.security]": DEBUG
---
spring:
  config:
    activate:
      on-profile: local
  security:
    oauth2:
      client:
        registration:
          storefront-client:
            client-id: storefront-bff
            client-secret: gPJFZUR2r7wgsjkCDRilDtkMhSQVCJo8
            scope: profile, email, openid, roles
            provider: keycloak
        provider:
          keycloak:
            issuer-uri: http://localhost:9090/realms/BookingSmart


  cloud:
    gateway:
      routes:
        - id: flight-service
          uri: lb://FLIGHT-SERVICE
          predicates:
            - Path=/api/flights/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: hotel-service
          uri: lb://HOTEL-SERVICE
          predicates:
            - Path=/api/hotels/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: booking-service
          uri: lb://BOOKING-SERVICE
          predicates:
            - Path=/api/bookings/**, /api/availability/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: customer-service
          uri: lb://CUSTOMER-SERVICE
          predicates:
            - Path=/api/customers/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: payment-service
          uri: lb://PAYMENT-SERVICE
          predicates:
            - Path=/api/payments/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/api/notifications/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: media-service
          uri: lb://MEDIA-SERVICE
          predicates:
            - Path=/api/media/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        - id: ai-agent-service
          uri: lb://AIAGENT-SERVICE
          predicates:
            - Path=/api/ai/**
          filters:
            - StripPrefix=1
            - TokenRelay=
        # Administrative routes
        - id: eureka-web-start
          uri: lb://DISCOVERY-SERVICE
          predicates:
            - Path=/eureka/web
          filters:
            - StripPrefix=2

        # Default frontend route (lowest priority)
        - id: frontend-fallback
          uri: http://localhost:3000
          predicates:
            - Path=/**
      default-filters:
        - SaveSession

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    hostname: localhost
    prefer-ip-address: false

---

spring:
  config:
    activate:
      on-profile: docker
  security:
    oauth2:
      client:
        registration:
          storefront-client:
            client-name: Storefront
            client-id: storefront-bff
            client-secret: ${KEYCLOAK_CLIENT_SECRET_STOREFRONT_BFF}
            scope: profile, email, openid, roles
            provider: keycloak
        provider:
          keycloak:
            issuer-uri: ${JWT_ISSUER_URI}
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: api
              uri: ${API_URL}
              predicates:
                - Path=/api/**
              filters:
                - RewritePath=/api/(?<segment>.*), /$\{segment}
                - TokenRelay=
            # Default frontend route (lowest priority)
            - id: frontend-fallback
              uri: http://storefront-fe:3000
              predicates:
                - Path=/**
          default-filters:
            - SaveSession

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always


