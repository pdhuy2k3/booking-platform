server:
  port: 8081
  servlet:
    context-path: /flights

# OpenAPI Documentation Configuration
springdoc:
  packages-to-scan: com.pdh.flight
  swagger-ui:
    path: /swagger-ui
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: swagger-ui
  oauthflow:
    authorization-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/auth
    token-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/token
  show-actuator: true



logging:
  level:
    com.pdh.flight: DEBUG
    org.springframework.security: DEBUG
    org.springframework.oauth2: DEBUG
    org.hibernate.SQL: DEBUG
spring:
  profiles:
    active: local
  application:
    name: FLIGHT-SERVICE
  threads:
    virtual:
      enabled: true
  task:
    scheduling:
      pool:
        size: 2  # Pool size for scheduled tasks

---

spring:
  config:
    activate:
      on-profile: local
  devtools:
    restart:
      enabled: true
      poll-interval: 2000
      quiet-period: 1000
    livereload:
      enabled: true
      port: 35729
  datasource:
    url: jdbc:postgresql://localhost:5432/flight_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
        temp:
          use_jdbc_metadata_defaults: false
  security:
    oauth2:
      resourceserver:
       jwt:
         issuer-uri: http://localhost:9090/realms/BookingSmart
  ai:
    mcp:
      server:
        enabled: true
        stdio: false
        name: flight-mcp-server
        version: 1.0.0
        type: sync
        base-url: /flights
        capabilities:
          prompt: false
          completion: false
          resource: false
          tool: true
  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  
  # Kafka Configuration - Optimized for local development
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: flight-service-local
      auto-offset-reset: earliest
      key-deserializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonSerializer
      session-timeout-ms: 30000
      heartbeat-interval-ms: 10000
    producer:
      key-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
      batch-size: 16384
      linger-ms: 5

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
  instance:
    hostname: localhost
    prefer-ip-address: false
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

---

spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
  ai:
    mcp:
      server:
        enabled: true
        stdio: false
        name: flight-mcp-server
        version: 1.0.0
        type: sync
        base-url: /flights
        capabilities:
          prompt: false
          completion: false
          resource: false
          tool: true
  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  
  # Kafka Configuration - Minimal, inherit tá»« BaseKafkaConfig
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: flight-service

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://discovery-service:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always


