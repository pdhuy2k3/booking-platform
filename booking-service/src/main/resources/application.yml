server:
  port: 8083
  servlet:
    context-path: /bookings

# OpenAPI Documentation Configuration
springdoc:
  api-docs:
    path: /api/docs
    enabled: true
  swagger-ui:
    path: /api/swagger-ui
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    try-it-out-enabled: true
    oauth:
      clientId: ${keycloak.client-id:bookingsmart-api}
      realm: ${keycloak.realm:bookingsmart}
      appName: ${spring.application.name}
  show-actuator: true
  group-configs:
    - group: 'public'
      display-name: 'Public API'
      paths-to-match: '/storefront/**'
    - group: 'admin'
      display-name: 'Admin API'
      paths-to-match: ['/backoffice/**', '/saga/**']
    - group: 'internal'
      display-name: 'Internal API'
      paths-to-match: '/internal/**'
    - group: 'monitoring'
      display-name: 'Monitoring & Health'
      paths-to-match: '**/health'

# API Documentation Properties
api:
  info:
    title: Booking Service API
    description: Booking orchestration and management API for the BookingSmart platform
    version: '@project.version@'
    contact:
      name: BookingSmart Booking Team
      email: booking-team@bookingsmart.com
    license:
      name: MIT License
      url: https://opensource.org/licenses/MIT
    oauth2:
      authorization-url: http://localhost:8080/realms/bookingsmart/protocol/openid-connect/auth
      token-url: http://localhost:8080/realms/bookingsmart/protocol/openid-connect/token
      refresh-url: http://localhost:8080/realms/bookingsmart/protocol/openid-connect/token
      scopes:
        admin: Administrative access to booking management
        customer: Customer access to booking creation and tracking
        partner: Partner access to booking integration endpoints
        internal: Internal service-to-service communication

spring:
  profiles:
    active: local,resilience
  application:
    name: booking-service
  threads:
    virtual:
      enabled: true

---

spring:
  config:
    activate:
      on-profile: local
  devtools:
    restart:
      enabled: true
      poll-interval: 2000
      quiet-period: 1000
    livereload:
      enabled: true
      port: 35731
  datasource:
    url: jdbc:postgresql://localhost:5432/booking_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 2
      connection-timeout: 20000
      idle-timeout: 300000
      leak-detection-threshold: 60000
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
        temp:
          use_jdbc_metadata_defaults: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart

  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  # Kafka Configuration - Optimized for local development
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}-local
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: 1
      retries: 3
      batch-size: 16384
      linger-ms: 5

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
    initial-instance-info-replication-interval-seconds: 5
    instance-info-replication-interval-seconds: 5
  instance:
    hostname: localhost
    prefer-ip-address: false
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

# Distributed Lock Configuration
# Using Redis for high-performance distributed locking

---

spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  # Kafka Configuration - Minimal, inherit tá»« BaseKafkaConfig
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.pdh.booking: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG

# Custom Booking Service Configuration
booking:

  saga:
    retry:
      max-attempts: 3
      delay-ms: 1000
    timeout:
      processing-timeout-ms: 30000
      compensation-timeout-ms: 15000

# Outbox Pattern Configuration
outbox:
  relay:
    fixed-delay-ms: 5000
    retry-delay-ms: 10000
    max-retries: 3
  topics:
    booking-events: booking.events
    payment-events: payment.events
    flight-events: flight.events
    hotel-events: hotel.events
    notification-events: notification.events
