server:
  port: 8083
  servlet:
    context-path: /bookings

spring:
  profiles:
    active: local
  application:
    name: booking-service
  threads:
    virtual:
      enabled: true

---

spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://localhost:5432/booking_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart

  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  # Kafka Configuration - Minimal, inherit từ BaseKafkaConfig
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    hostname: localhost
    prefer-ip-address: false

---

spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
  liquibase:
    enabled: true
    default-schema: public
    change-log: classpath:db/changelog/db.changelog-master.yaml
  # Kafka Configuration - Minimal, inherit từ BaseKafkaConfig
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${spring.application.name}
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.pdh.booking: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG

# Custom Booking Service Configuration
booking:
  services:
    mode: mock # mock or real - use mock for testing Saga Pattern
    urls:
      flight-service: http://flight-service:8081
      hotel-service: http://hotel-service:8082
      payment-service: http://payment-service:8080
      notification-service: http://notification-service:8080
  
  saga:
    retry:
      max-attempts: 3
      delay-ms: 1000
    timeout:
      processing-timeout-ms: 30000
      compensation-timeout-ms: 15000

# Outbox Pattern Configuration
outbox:
  relay:
    fixed-delay-ms: 5000
    retry-delay-ms: 10000
    max-retries: 3
  topics:
    booking-events: booking.events
    payment-events: payment.events
    flight-events: flight.events
    hotel-events: hotel.events
    notification-events: notification.events
