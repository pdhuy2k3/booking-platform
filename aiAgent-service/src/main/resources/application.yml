server:
  port: 8036
  servlet:
    context-path: /ai

# OpenAPI Documentation Configuration
#springdoc:
#  api-docs:
#    path: /api/docs
#    enabled: true
#  swagger-ui:
#    path: /api/swagger-ui
#    enabled: true
#    operationsSorter: method
#    tagsSorter: alpha
#    try-it-out-enabled: true
#  show-actuator: true

spring:
  profiles:
    active: local
  application:
    name: aiAgent-service
  threads:
    virtual:
      enabled: true
  autoconfigure:
    exclude:
      - org.springframework.ai.mcp.client.autoconfigure.SseWebFluxTransportAutoConfiguration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate.format_sql: true
      hibernate.jdbc.lob.non_contextual_creation: true
  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/db.changelog-master.yaml
  ai:
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: never
---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://localhost:5432/ai_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
  ai:
    openai:
      # Gemini API via OpenAI compatibility endpoint (for text chat)
      api-key: ${GEMINI_API_KEY}
      base-url: https://generativelanguage.googleapis.com/v1beta/openai/
      chat:
        options:
          model: gemini-2.5-flash
    mistralai:
      api-key: ${MISTRAL_API_KEY}
      chat:
        options:
          model: voxtral-mini-latest 

            
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: never

    mcp:
      client:
        enabled: true
        name: bookingsmrt-mcp-client
        version: 1.0.0

        request-timeout: 300s
        type: async
        root-change-notification: true
        toolcallback.enabled: true
        sse:
          connections:
            server1:
              url: http://localhost:8082
              sse-endpoint: /hotels/sse
            server2:
              url: http://localhost:8081
              sse-endpoint: /flights/sse
        stdio:
          connections:
            openweather:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - OWM_API_KEY
                - mcp/openweather
              env:
                OWM_API_KEY: ${OWM_API_KEY}
            mapbox:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - MAPBOX_ACCESS_TOKEN
                - mcp/mapbox
              env:
                MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
        initialized: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart
      client:
        registration:
          my-client1:
            provider: auth-server
            client-id: ai-agent
            client-secret: ${BOOKING_SMART_AI_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope:
              - mcp
        provider:
          auth-server:
            token-uri: http://localhost:9090/realms/BookingSmart/protocol/openid-connect/token
---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
      client:
        registration:
          my-client1:
            provider: auth-server
            client-id: ai-agent
            client-secret: ${BOOKING_SMART_AI_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope:
              - mcp
        provider:
          auth-server:
            token-uri: ${KEYCLOAK_HOST}/realms/BookingSmart/protocol/openid-connect/token

  ai:
    openai:
      # Gemini API via OpenAI compatibility endpoint
      api-key: ${GEMINI_API_KEY}
      base-url: https://generativelanguage.googleapis.com/v1beta/openai/
      chat:
        options:
          model: gemini-2.0-flash-lite
    mistralai:
      api-key: ${MISTRAL_API_KEY}
      chat:
        options:
          model: voxtral-mini-latest 
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: never

    mcp:
      client:
        enabled: true
        name: bookingsmrt-mcp-client
        version: 1.0.0
        type: async
        request-timeout: 300s

        root-change-notification: true
        toolcallback.enabled: true
        sse:
          connections:
            server1:
              url: http://hotel-service
              sse-endpoint: /hotels/sse
            server2:
              url: http://flight-service
              sse-endpoint: /flights/sse
        stdio:
          
          connections:
            openweather:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - OWM_API_KEY
                - mcp/openweather
              env:
                OWM_API_KEY: ${OWM_API_KEY}
            mapbox:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - MAPBOX_ACCESS_TOKEN
                - mcp/mapbox
              env:
                MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
        initialized: true
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true
