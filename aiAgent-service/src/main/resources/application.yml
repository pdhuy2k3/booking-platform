server:
  port: 8036
  servlet:
    context-path: /ai
  # Tomcat configuration for large payloads
  tomcat:
    max-http-form-post-size: 20MB
    max-swallow-size: 20MB
keycloak:
  client-id: $$$$$$$
  client-secret: $$$$$
  username: $$$$$
  password: $$$$$
  # Vector store configuration for default profile
  vectorstore:
    elasticsearch:
      initialize-schema: true
      index-name: bookingsmart-rag-index
      dimensions: 1024
      similarity: cosine
# OpenAPI Documentation Configuration
#springdoc:
#  api-docs:
#    path: /api/docs
#    enabled: true
#  swagger-ui:
#    path: /api/swagger-ui
#    enabled: true
#    operationsSorter: method
#    tagsSorter: alpha
#    try-it-out-enabled: true
#  show-actuator: true

spring:
  profiles:
    active: local
  application:
    name: aiAgent-service
  threads:
    virtual:
      enabled: true

  # Servlet multipart configuration for large file uploads
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      enabled: true
  autoconfigure:
    exclude:
      - org.springframework.ai.mcp.client.autoconfigure.SseWebFluxTransportAutoConfiguration
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate.format_sql: true
      hibernate.jdbc.lob.non_contextual_creation: true
  liquibase:
    enabled: true
    change-log: classpath:/db/changelog/db.changelog-master.yaml
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: bookingsmart-rag-service
      auto-offset-reset: latest
      enable-auto-commit: false
    producer:
      acks: all
      retries: 3
  ai:
    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: never
    vectorstore:
      milvus:
        client:
          uri: ${MILVUS_URI}
          token: ${MILVUS_TOKEN}
        embedding-dimension: 1024
        database-name: bookingsmart
        collection-name: vector_store
        index-type: hnsw
        metric-type: cosine
    mistralai:
      api-key: ${MISTRAL_API_KEY}
      chat:
        options:
          model: voxtral-mini-latest
      embedding:
        options:
          model: mistral-embed

---
spring:
  config:
    activate:
      on-profile: local
  datasource:
    url: jdbc:postgresql://localhost:5432/ai_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
  elasticsearch:
    uris: http://localhost:9200
    username: elastic
    password: changeme
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: bookingsmart-rag-service
      auto-offset-reset: latest
      enable-auto-commit: false
    producer:
      acks: all
      retries: 3
  ai:
    mistralai:
      api-key: ${MISTRAL_API_KEY}
      chat:
        options:
          model: voxtral-mini-latest
      embedding:
        options:
          model: mistral-embed

    vectorstore:
      
      elasticsearch:
        initialize-schema: true
        index-name: bookingsmart-rag-index
        dimensions: 1024
        similarity: cosine
        


    mcp:
      client:
        enabled: true
        name: bookingsmrt-mcp-client
        version: 1.0.0

        request-timeout: 300s
        type: sync
        root-change-notification: true
        toolcallback.enabled: true
        sse:
          connections:
            server1:
              url: http://localhost:8082
              sse-endpoint: /hotels/sse
            server2:
              url: http://localhost:8081
              sse-endpoint: /flights/sse
        stdio:
          connections:
            openweather:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - OWM_API_KEY
                - mcp/openweather
              env:
                OWM_API_KEY: ${OWM_API_KEY}
            mapbox:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - MAPBOX_ACCESS_TOKEN
                - mcp/mapbox
              env:
                MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
            brave:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - BRAVE_API_KEY
                - mcp/brave-search
              env:
                BRAVE_API_KEY: ${BRAVE_API_KEY}
            stripe:
              command: docker
              args:
                - run
                - --rm
                - -i
                - -e
                - STRIPE_SECRET_KEY
                - mcp/stripe
                - --tools=all
              env:
                STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
        initialized: true
  # Service URLs for RAG initialization
  app:
    flight-service:
      url: http://localhost:8081
    hotel-service:
      url: http://localhost:8082
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart
      client:
        registration:
          my-client1:
            provider: auth-server
            client-id: ai-agent
            client-secret: ${BOOKING_SMART_AI_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope:
              - mcp
        provider:
          auth-server:
            token-uri: http://localhost:9090/realms/BookingSmart/protocol/openid-connect/token
---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: bookingsmart-rag-service
      auto-offset-reset: latest
      enable-auto-commit: false
    producer:
      acks: all
      retries: 3
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
      client:
        registration:
          my-client1:
            provider: auth-server
            client-id: ai-agent
            client-secret: ${BOOKING_SMART_AI_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope:
              - mcp
        provider:
          auth-server:
            token-uri: ${KEYCLOAK_HOST}/realms/BookingSmart/protocol/openid-connect/token

  ai:
  
    model:
      embedding: mistral
    vectorstore:
      milvus:
        client:
          uri: ${MILVUS_URI}
          token: ${MILVUS_TOKEN}
          
        embedding-dimension: 1024
        database-name: bookingsmart
        collection-name: vector_store
        index-type: hnsw
        metric-type: cosine
        
        
    mistralai:
      api-key: ${MISTRAL_API_KEY}
      chat:
        options:
          model: mistral-medium-2508
          temperature: 0.0
      embedding:
        options:
          model: mistral-embed
          

    mcp:
      client:
        enabled: true
        version: 1.0.0
        type: sync
        request-timeout: 300s
        name: bookingsmrt-mcp-client
        root-change-notification: true
        toolcallback.enabled: true
        sse:
          connections:
            hotel-mcp-server:
              url: http://hotel-service
              sse-endpoint: /hotels/sse
            flight-mcp-server:
              url: http://flight-service
              sse-endpoint: /flights/sse
            booking-mcp-server:
              url: http://booking-service
              sse-endpoint: /bookings/sse
            payment-mcp-server:
              url: http://payment-service
              sse-endpoint: /payments/sse

        stdio:
          connections:
            openweather:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - OWM_API_KEY
                - mcp/openweather
              env:
                OWM_API_KEY: ${OWM_API_KEY}
            mapbox:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - MAPBOX_ACCESS_TOKEN
                - mcp/mapbox
              env:
                MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
            brave:
              command: docker
              args:
                - run
                - -i
                - --rm
                - -e
                - BRAVE_API_KEY
                - -e
                - BRAVE_MCP_DISABLED_TOOLS
                - mcp/brave-search
              env:
                BRAVE_API_KEY: ${BRAVE_API_KEY}
                BRAVE_MCP_DISABLED_TOOLS: brave_news_search brave_web_search brave_summarizer	
        initialized: true
  
  # Service URLs for RAG initialization
app:
  flight-service:
    url: http://flight-service
  hotel-service:
    url: http://hotel-service

# Logging Configuration for Tool Tracking
# logging:
#   level:
#     '[com.pdh.ai.agent.CoreAgent]': INFO
#     '[com.pdh.ai.service.ToolResultCollector]': INFO
#     '[com.pdh.ai.agent.mcp.client.CustomSyncMcpToolCallbackProvider]': INFO
#     '[com.pdh.ai.agent.advisor.LoggingAdvisor]': INFO
#     '[org.springframework.ai.mcp]': DEBUG
#     '[org.springframework.ai.tool]': DEBUG
#     '[io.modelcontextprotocol]': DEBUG
#   pattern:
#     console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
#     file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true