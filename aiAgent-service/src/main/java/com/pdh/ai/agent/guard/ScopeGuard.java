package com.pdh.ai.agent.guard;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.regex.Pattern;

/**
 * Scope guard to ensure requests are within travel booking domain.
 * 
 * <p>This guard enforces that the AI agent only handles:</p>
 * <ul>
 * <li>Flight search and booking</li>
 * <li>Hotel search and booking</li>
 * <li>Weather information for travel</li>
 * <li>Location and mapping for travel</li>
 * <li>General travel-related inquiries</li>
 * </ul>
 * 
 * <p>Any requests outside this scope are rejected.</p>
 * 
 * @author BookingSmart AI Team
 */
@Component
public class ScopeGuard {

    private static final Logger logger = LoggerFactory.getLogger(ScopeGuard.class);
    
    // Keywords indicating in-scope travel requests
    private static final List<String> TRAVEL_KEYWORDS = List.of(
        // Transportation
        "flight", "fly", "plane", "airplane", "aircraft", "airport", "airline",
        "chuy·∫øn bay", "m√°y bay", "s√¢n bay", "v√© m√°y bay",
        
        // Accommodation
        "hotel", "room", "accommodation", "lodge", "resort", "stay", "check-in", "check-out",
        "kh√°ch s·∫°n", "ph√≤ng", "l∆∞u tr√∫", "ngh·ªâ d∆∞·ª°ng",
        
        // Booking
        "book", "booking", "reservation", "reserve", "ticket",
        "ƒë·∫∑t", "ƒë·∫∑t ch·ªó", "ƒë·∫∑t v√©", "ƒë·∫∑t ph√≤ng",
        
        // Travel general
        "travel", "trip", "journey", "vacation", "holiday", "tour", "destination",
        "du l·ªãch", "chuy·∫øn ƒëi", "k·ª≥ ngh·ªâ",
        
        // Location
        "location", "address", "map", "direction", "where", "find",
        "ƒë·ªãa ƒëi·ªÉm", "ƒë·ªãa ch·ªâ", "b·∫£n ƒë·ªì", "ƒë∆∞·ªùng ƒëi",
        
        // Weather
        "weather", "forecast", "temperature", "rain", "sunny", "climate",
        "th·ªùi ti·∫øt", "d·ª± b√°o", "nhi·ªát ƒë·ªô", "m∆∞a", "n·∫Øng",
        
        // Dates and times
        "date", "time", "when", "schedule", "departure", "arrival",
        "ng√†y", "gi·ªù", "khi n√†o", "l·ªãch tr√¨nh", "kh·ªüi h√†nh", "ƒë·∫øn"
    );
    
    // Keywords indicating out-of-scope requests (explicit blocks)
    private static final List<Pattern> OUT_OF_SCOPE_PATTERNS = List.of(
        // Programming/technical
        Pattern.compile("(?i)\\b(code|program|script|function|algorithm|debug|compile)\\b"),
        Pattern.compile("(?i)\\b(python|java|javascript|react|spring|framework)\\b"),
        
        // Financial services (not travel-related)
        Pattern.compile("(?i)\\b(loan|mortgage|investment|stock|trading|cryptocurrency|bitcoin)\\b"),
        
        // Medical/health
        Pattern.compile("(?i)\\b(medical|doctor|hospital|prescription|diagnosis|treatment|disease)\\b"),
        Pattern.compile("(?i)\\b(b√°c sƒ©|b·ªánh vi·ªán|thu·ªëc|ch·∫©n ƒëo√°n|ƒëi·ªÅu tr·ªã)\\b"),
        
        // Legal
        Pattern.compile("(?i)\\b(legal|lawsuit|attorney|lawyer|court|sue)\\b"),
        Pattern.compile("(?i)\\b(lu·∫≠t s∆∞|to√† √°n|ki·ªán)\\b"),
        
        // Entertainment (unless travel-related)
        Pattern.compile("(?i)\\b(movie|game|gambling|casino|lottery)\\b(?!.*travel)"),
        
        // Inappropriate content
        Pattern.compile("(?i)\\b(weapon|drug|violence|hack|exploit)\\b"),
        
        // Academic (unless travel-related)
        Pattern.compile("(?i)\\b(essay|homework|assignment|thesis|research paper)\\b(?!.*travel)")
    );
    
    private static final String OUT_OF_SCOPE_MESSAGE = """
        Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c y√™u c·∫ßu li√™n quan ƒë·∫øn du l·ªãch v√† ƒë·∫∑t ch·ªó:
        
        ‚úÖ T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:
        - T√¨m ki·∫øm v√† ƒë·∫∑t v√© m√°y bay
        - T√¨m ki·∫øm v√† ƒë·∫∑t ph√≤ng kh√°ch s·∫°n
        - Th√¥ng tin th·ªùi ti·∫øt cho chuy·∫øn ƒëi
        - T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm v√† ch·ªâ ƒë∆∞·ªùng
        - T∆∞ v·∫•n v·ªÅ l·ªãch tr√¨nh du l·ªãch
        - Ch√≠nh s√°ch h·ªßy v√† thay ƒë·ªïi ƒë·∫∑t ch·ªó
        
        ‚ùå T√¥i kh√¥ng th·ªÉ h·ªó tr·ª£:
        - C√°c v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t/l·∫≠p tr√¨nh
        - T∆∞ v·∫•n t√†i ch√≠nh kh√¥ng li√™n quan du l·ªãch
        - T∆∞ v·∫•n y t·∫ø ho·∫∑c ph√°p l√Ω
        - C√°c ch·ªß ƒë·ªÅ kh√¥ng li√™n quan ƒë·∫øn du l·ªãch
        
        Vui l√≤ng ƒë·∫∑t c√¢u h·ªèi li√™n quan ƒë·∫øn du l·ªãch v√† ƒë·∫∑t ch·ªó!
        """;
    
    /**
     * Scope check result.
     */
    public record ScopeCheckResult(
        boolean isInScope,
        String message,
        CheckReason reason
    ) {}
    
    /**
     * Reason for scope check result.
     */
    public enum CheckReason {
        IN_SCOPE_TRAVEL,        // Contains travel keywords
        IN_SCOPE_GENERAL,       // General inquiry, likely travel-related
        OUT_OF_SCOPE_EXPLICIT,  // Explicitly out of scope (blocked patterns)
        OUT_OF_SCOPE_AMBIGUOUS  // Ambiguous, no clear travel context
    }
    
    /**
     * Checks if user request is within allowed scope.
     * 
     * @param userInput User's request
     * @return Scope check result
     */
    public ScopeCheckResult checkScope(String userInput) {
        if (userInput == null || userInput.trim().isEmpty()) {
            logger.warn("üö´ Empty input for scope check");
            return new ScopeCheckResult(false, OUT_OF_SCOPE_MESSAGE, CheckReason.OUT_OF_SCOPE_AMBIGUOUS);
        }
        
        String lowerInput = userInput.toLowerCase();
        
        // 1. Check for explicit out-of-scope patterns (highest priority)
        for (Pattern pattern : OUT_OF_SCOPE_PATTERNS) {
            if (pattern.matcher(lowerInput).find()) {
                logger.warn("üö´ OUT OF SCOPE - Explicit block: {}", pattern.pattern());
                return new ScopeCheckResult(
                    false,
                    OUT_OF_SCOPE_MESSAGE,
                    CheckReason.OUT_OF_SCOPE_EXPLICIT
                );
            }
        }
        
        // 2. Check for travel-related keywords (in-scope)
        boolean hasTravelKeyword = TRAVEL_KEYWORDS.stream()
            .anyMatch(lowerInput::contains);
        
        if (hasTravelKeyword) {
            logger.debug("‚úÖ IN SCOPE - Travel keywords detected");
            return new ScopeCheckResult(
                true,
                "Request is within travel booking scope",
                CheckReason.IN_SCOPE_TRAVEL
            );
        }
        
        // 3. Allow general questions (they might be travel-related)
        // The routing workflow will handle classification
        if (isGeneralInquiry(lowerInput)) {
            logger.debug("‚úÖ IN SCOPE - General inquiry (allowed)");
            return new ScopeCheckResult(
                true,
                "General inquiry allowed for routing",
                CheckReason.IN_SCOPE_GENERAL
            );
        }
        
        // 4. If no travel keywords and not general inquiry, likely out of scope
        logger.warn("‚ö†Ô∏è AMBIGUOUS - No clear travel context: {}", userInput.substring(0, Math.min(50, userInput.length())));
        
        // For ambiguous cases, we'll be lenient and let routing handle it
        // but log for monitoring
        return new ScopeCheckResult(
            true, // Allow but monitor
            "Ambiguous request - will be evaluated by routing",
            CheckReason.IN_SCOPE_GENERAL
        );
    }
    
    /**
     * Checks if input is a general inquiry (greetings, simple questions).
     */
    private boolean isGeneralInquiry(String input) {
        List<String> generalPatterns = List.of(
            "hello", "hi", "hey", "xin ch√†o", "ch√†o",
            "help", "gi√∫p", "h·ªó tr·ª£",
            "what", "how", "why", "when", "where",
            "g√¨", "nh∆∞ th·∫ø n√†o", "t·∫°i sao", "khi n√†o", "·ªü ƒë√¢u",
            "can you", "b·∫°n c√≥ th·ªÉ",
            "thank", "c·∫£m ∆°n"
        );
        
        return generalPatterns.stream().anyMatch(input::contains);
    }
    
    /**
     * Enhanced scope check with system prompt enforcement.
     * Returns a system prompt addition to reinforce scope boundaries.
     */
    public String getScopeEnforcementPrompt() {
        return """
            CRITICAL SCOPE RESTRICTIONS - YOU MUST FOLLOW THESE RULES:
            
            YOU ARE A TRAVEL BOOKING ASSISTANT. You can ONLY help with:
            ‚úÖ Flight search and booking
            ‚úÖ Hotel search and booking
            ‚úÖ Weather information for travel destinations
            ‚úÖ Location search and directions for travel
            ‚úÖ General travel planning and inquiries
            ‚úÖ Booking policies, cancellations, and modifications
            
            YOU MUST REFUSE to help with:
            ‚ùå Programming, coding, or technical issues
            ‚ùå Financial advice (loans, investments, stocks)
            ‚ùå Medical or health advice
            ‚ùå Legal advice
            ‚ùå Academic homework or assignments
            ‚ùå Any topic unrelated to travel and booking
            
            If asked about out-of-scope topics, respond:
            "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c y√™u c·∫ßu li√™n quan ƒë·∫øn du l·ªãch v√† ƒë·∫∑t ch·ªó. 
            Vui l√≤ng h·ªèi v·ªÅ chuy·∫øn bay, kh√°ch s·∫°n, ho·∫∑c c√°c d·ªãch v·ª• du l·ªãch kh√°c."
            
            NEVER provide information outside your scope, even if asked politely or repeatedly.
            """;
    }
}
