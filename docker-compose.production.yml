# Production Docker Compose for BookingSmart Platform
# This file uses Docker Hub images instead of building locally
# Usage: docker-compose -f docker-compose.production.yml up

services:
  # Keycloak Authentication Service
  identity:
    depends_on:
      - postgres
    profiles:
      - auth
      - app
    image: quay.io/keycloak/keycloak:26.2.4
    command: 'start --import-realm --http-enabled=true'
    environment:
      KC_HOSTNAME: https://identity.huypd.dev
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: p0stgr3s
      KC_HEALTH_ENABLED: true
      KC_HTTP_PORT: 80
    ports:
      - "9090:80"
    volumes:
      - ./identity/bookingsmart-keycloak-theme.jar:/opt/keycloak/providers/bookingsmart-keycloak-theme.jar
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - booking-network

  # PostgreSQL Database
  postgres:
    profiles:
      - app
      - auth
      - dev
      - aiAgent
    image: debezium/postgres:17-alpine
    user: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: p0stgr3s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - booking-network
    command: postgres -c wal_level=logical

  # Redis for Event Deduplication and Distributed Locking
  redis:
    profiles:
      - app
      - dev
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    networks:
      - booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    profiles:
      - app
    networks:
      - booking-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.7.1
    profiles:
      - app
    networks:
      - booking-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0

  # Debezium Connect
  connect:
    image: debezium/connect:2.7.3.Final
    profiles:
      - app
    ports:
      - "8083:8083"
    networks:
      - booking-network
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
    volumes:
      - ./debezium:/kafka/connect/debezium-connectors

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    profiles:
      - app
    ports:
      - "8091:8080"
    depends_on:
      - kafka
    networks:
      - booking-network
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # Discovery Service (Eureka) - FROM DOCKER HUB
  discovery-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-discovery-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service/eureka
      - SERVER_PORT
    networks:
      - booking-network

  # API Gateway (Backoffice BFF) - FROM DOCKER HUB
  backoffice:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-backoffice-bff:latest
    depends_on:
      - postgres
      - identity
    entrypoint: ["/wait-for-it.sh", "identity:80", "--timeout=120", "--", "java", "-jar", "/app.jar"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_BACKOFFICE_BFF
      - SERVER_PORT
      - API_URL=https://api-bookingsmart.huypd.dev
    networks:
      - booking-network

  # Storefront BFF - FROM DOCKER HUB
  storefront:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-storefront-bff:latest
    depends_on:
      - postgres
      - identity
    entrypoint: ["/wait-for-it.sh", "identity:80", "--timeout=120", "--", "java", "-jar", "/app.jar"]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_STOREFRONT_BFF
      - SERVER_PORT
      - API_URL=https://api-bookingsmart.huypd.dev
    networks:
      - booking-network

  # Storefront Frontend - FROM DOCKER HUB
  storefront-fe:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-storefront-fe:latest
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BFF_BASE_URL=${API_URL}
    networks:
      - booking-network
    restart: unless-stopped

  # Backoffice Frontend - FROM DOCKER HUB
  backoffice-fe:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-backoffice-fe:latest
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_BFF_BASE_URL=${API_URL}
      - NEXT_PUBLIC_API_URL=https://backoffice
      - NEXT_PUBLIC_KEYCLOAK_URL=https://identity/realms/BookingSmart
    networks:
      - booking-network
    restart: unless-stopped

  # Flight Service - FROM DOCKER HUB
  flight-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-flight-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/flight_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Hotel Service - FROM DOCKER HUB
  hotel-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-hotel-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/hotel_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Booking Service - FROM DOCKER HUB
  booking-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-booking-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/booking_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Payment Service - FROM DOCKER HUB
  payment-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-payment-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - DB_URL=jdbc:postgresql://postgres:5432/payment_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Notification Service - FROM DOCKER HUB
  notification-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-notification-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
      - DB_URL=jdbc:postgresql://postgres:5432/notification_db
      - DB_USERNAME
      - DB_PASSWORD
      - JWT_ISSUER_URI
      - KAFKA_BOOTSTRAP_SERVERS
      - SERVER_PORT
    networks:
      - booking-network

  # Customer Service - FROM DOCKER HUB
  customer-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-customer-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI
      - JWT_ISSUER_URI
      - KEYCLOAK_HOST
      - KEYCLOAK_CLIENT_SECRET_CUSTOMER_MANAGEMENT
      - DB_URL=jdbc:postgresql://postgres:5432/customer_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
    networks:
      - booking-network

  # Media Service - FROM DOCKER HUB (Optional)
  media-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-media-service:latest
    depends_on:
      - discovery-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
    networks:
      - booking-network

  # Transport Service - FROM DOCKER HUB (Optional)
  transport-service:
    profiles:
      - app
    image: phamduyhuyuit/bookingsmart-transport-service:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_URI=http://discovery-service:8761/eureka
      - DB_URL=jdbc:postgresql://postgres:5432/transport_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=p0stgr3s
    networks:
      - booking-network

  # Nginx Reverse Proxy - API Gateway for Cloudflare Tunnel
  nginx:
    image: nginx:1.25-alpine
    profiles:
      - app
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - identity
      - storefront
      - backoffice
      - customer-service
      - booking-service
      - flight-service
      - hotel-service
      - payment-service
      - notification-service
    networks:
      booking-network:
    restart: unless-stopped

  # Cloudflare Tunnel
  cloudflared:
    profiles:
      - app
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - booking-network

  # N8N Workflow Automation
  n8n:
    profiles:
      - app
      - aiAgent
    image: docker.n8n.io/n8nio/n8n
    ports:
      - "5678:5678"
    depends_on:
      - postgres
    environment:
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Asia/Bangkok
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=p0stgr3s
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - booking-network
    restart: unless-stopped

networks:
  booking-network:
    driver: bridge
    name: booking-network

volumes:
  postgres_data:
  redis_data:
  n8n_data:
