server:
  port: 8084
  servlet:
    context-path: /customers

# OpenAPI Documentation Configuration
springdoc:
  packages-to-scan: com.pdh.customer
  swagger-ui:
    path: /swagger-ui
    oauth:
      use-pkce-with-authorization-code-grant: true
      client-id: swagger-ui
  oauthflow:
    authorization-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/auth
    token-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/token
  show-actuator: true
  group-configs:
    - group: 'public'
      display-name: 'Public API'
      paths-to-match: '/storefront/**'
    - group: 'admin'
      display-name: 'Admin API'
      paths-to-match: '/backoffice/admin/**'
    - group: 'partner'
      display-name: 'Partner API'
      paths-to-match: '/backoffice/partner/**'

# API Documentation Properties
api:
  info:
    title: Customer Service API
    description: Customer management and profile API for the BookingSmart platform
    version: '@project.version@'
    contact:
      name: BookingSmart Customer Team
      email: customer-team@bookingsmart.com
    oauth2:
      authorization-url: http://localhost:8080/realms/bookingsmart/protocol/openid-connect/auth
      token-url: http://localhost:8080/realms/bookingsmart/protocol/openid-connect/token
      scopes:
        admin: Administrative access to customer management
        customer: Customer access to profile operations
        partner: Partner access to customer integration endpoints

spring:
  profiles:
    active: local
  application:
    name: CUSTOMER-SERVICE
  threads:
    virtual:
      enabled: true

# Cloudflare Turnstile Configuration
turnstile:
  secret-key: ${TURNSTILE_SECRET_KEY:}  # Default to empty string if not set
---

spring:
  config:
    activate:
      on-profile: local
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart
keycloak:
  auth-server-url: http://localhost:9090
  realm: BookingSmart
  resource: customer-management
  credentials:
    secret: ${KEYCLOAK_CLIENT_SECRET_CUSTOMER_MANAGEMENT}
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
  instance:
    hostname: localhost
    prefer-ip-address: false
---
spring:
  config:
    activate:
      on-profile: docker
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}
keycloak:
    auth-server-url: ${KEYCLOAK_HOST:http://identity:9090}
    realm: BookingSmart
    resource: customer-management
    credentials:
        secret: ${KEYCLOAK_CLIENT_SECRET_CUSTOMER_MANAGEMENT}
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true
