spring:
  application:
    name: PAYMENT_SERVICE
  profiles:
    active: local
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/payment_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:p0stgr3s}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
    enabled: true
  
  # Kafka Configuration for Outbox Pattern
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: payment-service-booking-group

  # Redis Configuration for Event Deduplication
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0


server:
  port: 8085
  servlet:
    context-path: /payments

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# Payment Gateway Configuration
payment:
  gateways:
    stripe:
      api:
        publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_default}
        secret-key: ${STRIPE_SECRET_KEY:sk_test_default}
        api-version: "2025-06-30.basil"
      settings:
        capture-method: automatic
        confirmation-method: automatic
        currency: vnd
        statement-descriptor: "BookingSmart"
        receipt-email: true

    vietqr:
      api:
        base-url: ${VIETQR_API_BASE_URL:https://api.vietqr.vn}
        client-id: ${VIETQR_CLIENT_ID:default_client_id}
        api-key: ${VIETQR_API_KEY:default_api_key}
        timeout-seconds: 30
      bank:
        account-number: ${BANK_ACCOUNT_NUMBER:1234567890}
        account-name: ${BANK_ACCOUNT_NAME:BOOKING SMART COMPANY}
        bank-code: ${BANK_CODE:VCB}
        bank-name: ${BANK_NAME:Vietcombank}
      callback:
        endpoint-path: /api/payments/vietqr/callback
        secret: ${VIETQR_CALLBACK_SECRET:vietqr_secret}
      settings:
        qr-expiration-minutes: 30
        currency: VND
        template: compact2

    # Common gateway settings
    common:
      timeout-seconds: 30
      retry-attempts: 3
      retry-delay-seconds: 5
      webhook-verification: true

# Customer Service Integration
customer-service:
  base-url: ${CUSTOMER_SERVICE_URL:http://customer-service}
  timeout-seconds: ${CUSTOMER_SERVICE_TIMEOUT:10}

---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  
  # Kafka Configuration - Minimal, inherit tá»« BaseKafkaConfig
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: payment-service-booking-group

  # Redis Configuration for Event Deduplication
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true
    hostname: payment-service
