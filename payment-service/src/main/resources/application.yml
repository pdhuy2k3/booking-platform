# OpenAPI Documentation Configuration
springdoc:
  api-docs:
    path: /api/docs
    enabled: true
  swagger-ui:
    path: /api/swagger-ui
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    try-it-out-enabled: true
  show-actuator: true
  group-configs:
    - group: 'internal'
      display-name: 'Internal API'
      paths-to-match: ['/process', '/webhook/**']
    - group: 'admin'
      display-name: 'Admin API'
      paths-to-match: '/admin/**'

# API Documentation Properties
api:
  info:
    title: Payment Service API
    description: Payment processing and gateway integration API for the BookingSmart platform
    version: '@project.version@'
    contact:
      name: BookingSmart Payment Team
      email: payment-team@bookingsmart.com

# Payment Gateway Configuration
payment:
  gateways:
    stripe:
      api:
        publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_default}
        secret-key: ${STRIPE_SECRET_KEY:sk_test_default}
        api-version: "2025-08-27.basil"
      settings:
        capture-method: automatic
        confirmation-method: automatic
        currency: vnd
        statement-descriptor: "BookingSmart"
        receipt-email: true

    # Common gateway settings
    common:
      timeout-seconds: 30
      retry-attempts: 3
      retry-delay-seconds: 5
      webhook-verification: true
  
  # Data encryption settings
  encryption:
    key: ${PAYMENT_ENCRYPTION_KEY:default-encryption-key-32-characters}



spring:
  application:
    name: PAYMENT_SERVICE
  profiles:
    active: local
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/payment_db}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:p0stgr3s}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
    enabled: true
  
  # Kafka Configuration for Outbox Pattern
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: payment-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 3
      acks: all

server:
  port: 8085
  servlet:
    context-path: /payments

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always


---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  
  # Kafka Configuration - Minimal, inherit tá»« BaseKafkaConfig  
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: payment-service

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true
    hostname: payment-service
