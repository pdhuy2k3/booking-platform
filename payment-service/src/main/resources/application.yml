# OpenAPI Documentation Configuration
springdoc:
  packages-to-scan: com.pdh.payment
  swagger-ui:
    path: /swagger-ui
    oauth:
      use-pkce-with-authorization-code-grant:  true
      client-id: swagger-ui
  oauthflow:
    authorization-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/auth
    token-url: ${KEYCLOAK_ISSUER_URI:http://localhost:9090}/protocol/openid-connect/token


# API Documentation Properties
api:
  info:
    title: Payment Service API
    description: Payment processing and gateway integration API for the BookingSmart platform
    version: '@project.version@'
    contact:
      name: BookingSmart Payment Team
      email: payment-team@bookingsmart.com

# Payment Gateway Configuration
payment:
  gateways:
    stripe:
      api:
        publishable-key: ${STRIPE_PUBLISHABLE_KEY:pk_test_default}
        secret-key: ${STRIPE_SECRET_KEY:sk_test_default}
        api-version: "2025-08-27.basil"
      settings:
        capture-method: automatic
        confirmation-method: automatic
        currency: vnd
        statement-descriptor: "BookingSmart"
        receipt-email: true

    # Common gateway settings
    common:
      timeout-seconds: 30
      retry-attempts: 3
      retry-delay-seconds: 5
      webhook-verification: true
  
  # Data encryption settings
  encryption:
    key: ${PAYMENT_ENCRYPTION_KEY:default-encryption-key-32-characters}


server:
  port: 8085
  servlet:
    context-path: /payments
  
spring:
  application:
    name: PAYMENT-SERVICE
  profiles:
    active: local
  threads:
    virtual:
      enabled: true



eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
  instance:
    prefer-ip-address: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
---
spring:
  config:
    activate:
      on-profile: local

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9090/realms/BookingSmart
  datasource:
    url: jdbc:postgresql://localhost:5432/payment_db
    username: postgres
    password: p0stgr3s
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: payment-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 3
      acks: all

---

spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: payment-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 3
      acks: all
eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URI}
  instance:
    prefer-ip-address: true
    hostname: payment-service

